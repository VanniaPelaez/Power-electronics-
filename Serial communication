#include <WiFi.h>
#include <WebServer.h>

const char* ssid = "ESP32_Hitler";
const char* password = "12345678";

const int LED_PIN = 4;
int lastDutyCycle = 0;  // Variable para almacenar el último valor del duty cycle

WebServer server(80);  // Servidor web en el puerto 80

// Función para manejar las solicitudes de cambio de duty cycle
void handleSetDutyCycle() {
  if (server.hasArg("value")) {
    int dutyCycle = server.arg("value").toInt();
    if (dutyCycle >= 0 && dutyCycle <= 255) {
      if (dutyCycle != lastDutyCycle) {
        lastDutyCycle = dutyCycle;
        ledcWrite(LED_PIN, dutyCycle);
        Serial.printf("Nuevo duty cycle: %d\n", dutyCycle);
        server.send(200, "text/plain", "Duty cycle actualizado.");
        return;
      }
    }
  }
  server.send(400, "text/plain", "Solicitud inválida. Asegúrese de enviar un valor entre 0 y 255.");
}

// Página principal para controlar el LED
void handleRoot() {
  String html = R"rawliteral(
    <!DOCTYPE html>
    <html>
    <head>
      <title>Control de LED</title>
    </head>
    <body>
      <h1>Control de LED con ESP32</h1>
      <form action="/setDutyCycle" method="get">
        <label for="value">Duty Cycle (0-255):</label>
        <input type="number" id="value" name="value" min="0" max="255" required>
        <button type="submit">Actualizar</button>
      </form>
    </body>
    </html>
  )rawliteral";
  server.send(200, "text/html", html);
}

void setup() {
  Serial.begin(115200);

  // Configura el LED para PWM
  ledcAttach(LED_PIN, 75000, 8);
  ledcWrite(0, lastDutyCycle);  // Inicia con el último duty cycle almacenado

  // Configura la red WiFi en modo AP
  WiFi.softAP(ssid, password);
  Serial.printf("Punto de acceso creado. SSID: %s, IP: %s\n", ssid, WiFi.softAPIP().toString().c_str());

  // Configura las rutas del servidor web
  server.on("/", handleRoot);
  server.on("/setDutyCycle", handleSetDutyCycle);
  
  // Inicia el servidor web
  server.begin();
  Serial.println("Servidor web iniciado.");
}

void loop() {
  // Maneja las solicitudes entrantes
  server.handleClient();
}
